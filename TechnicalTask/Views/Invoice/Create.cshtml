@model InvoiceViewModel
@{
    ViewData["Title"] = "Create";
    var Stores = new SelectList(ViewBag.Stores,"Id","Name");
    var Items = new SelectList(ViewBag.Items,"Id","Name");

}

<h1>Create</h1>
<br />
<br />
<form asp-action="Create" asp-controller="Invoice" enctype="multipart/form-data">
    <div class="form-group">
        <label class="col-form-label" asp-for="InvoiceNo"></label>
        <input type="number" class="form-control" asp-for="InvoiceNo" />
        <span asp-validation-for="InvoiceNo" class="text-danger"></span>
    </div>
    <div class="form-group">
            <label class="col-form-label" asp-for="StoreId"></label>
            <select asp-for="StoreId" asp-items="Stores" class="form-control">
                <option>Choose a Store...</option>
            </select>

            <span asp-validation-for="StoreId" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label class="col-form-label" asp-for="Date"></label>
        <input type="date" class="form-control" asp-for="Date" />
        <span asp-validation-for="Date" class="text-danger"></span>
    </div>
    @*here will be the invoiceitems dynamic table*@
    <br />
    <br />
    <br />
   <table id="invoiceTable" class="table">
        <thead>
            <tr>
                <th>Item</th>
                <th>Unit</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total</th>
                <th>Discount</th>
                <th>Net</th>
            </tr>
        </thead>
        <tbody>
            @{ var i = 0; }
            @foreach (var item in Model.InvoiceItemsViewModel)
            {
                
                @Html.PartialAsync("_InvoiceItem",item);
            }
        </tbody>
    </table>
    
    <button type="button" id="addRowButton" class="btn btn-primary">Add Item</button>
    <br />
    <br />
@*end of dynamic table*@
<input type="hidden" id="InvoiceItemsViewModel" name="InvoiceItemsViewModel[]" />
    <div class="form-group">
        <label class="col-form-label" asp-for="Total"></label>
        <input type="number" class="form-control" asp-for="Total" />
        <span asp-validation-for="Total" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label class="col-form-label" asp-for="Taxes"></label>
        <input type="number" min="1" max="100" id="TotalTaxesPercentage" class="form-control" asp-for="Taxes" />
        <span asp-validation-for="Taxes" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label class="col-form-label" asp-for="Net"></label>
        <input type="number" class="form-control" asp-for="Net" />
        <span asp-validation-for="Net" class="text-danger"></span>
    </div>
     <button type="submit" class="btn btn-success">Save Invoice</button>
    <a asp-action="Index" class="btn btn-light">Cancel</a>
</form>

@section Scripts {

    <script>
        $(document).ready(function () {
            // Initialize the dynamic table
            var rowIndex = @Model.InvoiceItemsViewModel.Count;
            var invoiceItemsArray = [];
            // Add a row to the table
            function addRow() {
                $.ajax({
                    url: '@Url.Action("AddInvoiceItemRow", "Invoice")',
                    type: 'GET',
                    data: { index: rowIndex },
                    success: function (result) {
                        $('#invoiceTable tbody').append(result);
                        var newItem = {
                        ItemId: null,
                        Unit: null,
                        Quantity: null,
                        Price: null,
                        Discount:null,
                        InvoiceItemTotal: null,
                        InvoiceItemNet: null
                    };
                    invoiceItemsArray.push(newItem);
                        rowIndex++;
                    },
                    error: function (xhr, status, error) {
                        console.log(error);
                    }
                });
            }

            // Attach event handler to the add row button
            $('#addRowButton').on('click', function () {
                addRow();
            });
            $('form').on('submit', function () {
                invoiceItemsArray = [];

                // Iterate through the rows and populate the invoiceItemsArray
                $('#invoiceTable tbody tr').each(function () {
                var row = $(this);
                var newItem = {
                    ItemId: row.find('select[name$="ItemId"]').val(),
                    Unit: row.find('select[name$="Unit"]').val(),
                    Quantity: row.find('input[name$="Quantity"]').val(),
                    Price: row.find('input[name$="Price"]').val(),
                    Discount: row.find('input[name$="Discount"]').val(),
                    InvoiceItemTotal: row.find('input[name$="InvoiceItemTotal"]').val(),
                    InvoiceItemNet: row.find('input[name$="InvoiceItemNet"]').val()
                };

                invoiceItemsArray.push(newItem);

                });
                 // Set the InvoiceItemsViewModel property with the array
    var invoiceItemsJson = JSON.stringify(invoiceItemsArray);
    $('#InvoiceItemsViewModel').val(invoiceItemsJson);
    console.log(invoiceItemsJson)
        });
        $(document).on('click', '.removeRowButton', function() {
            $(this).closest('tr').remove();
        });
        });


        //// Function to calculate the net value
        //function calculateNet(discount, unit, price) {
        //    // Perform your calculation here
        //    // For example:
        //    var net =  price * (discount/100);
        //    return net;
        //}
    </script>
}

